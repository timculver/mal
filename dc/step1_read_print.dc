# Globals
       # T  Token stack, with first token at the top
       # t  Size of T (register stacks can't tell you their depth)
       # Y  Symbol table. Y[i] is a large number; Y[i+1] is the string.
0sy    # y  Next free entry in Y (always even).

# q() : exit caller
[q]sq

# R() : rep()
[
  lLx            # L(tokens...) -> T
  lPx            # P()
  ;Ix            # Pop type, pop address, call I[type](address)
  #lUx            # debugging: print symbol table
  []p           # print ascii 26 as a signal to flush
]sR

# L(tokens...) : Reverse the entire main stack into T
[
  zst              # t = initial stack depth
  [z0=q ST lax]sa  # Until z == 0: push -> T
  lax
]sL

# g() : get next token
[LTlt1-st]sg

# P() : Read an expression from T
[
  [lt0=q         # Until t == 0:
    lgx          # get next token (type)
    s@           # Drop the type, since only symbols are implemented so far.
    lJx          # Save symbol in table; returns address of symbol.
    1]sa         # Push the type.
  lax
]sP

# I[1](string, char...) : print a symbol
[
  1+;YP          # Print Y[address+1].
]1:I

# J() : read a symbol from T
[
  0Sn0Sa0Sb0Sc     # reserve locals
  lgx              # get next token (string)
  dZsn             # n = string length
  ly1+:Y           # Y[y+1] = string. Will be its permanent home if this is a new symbol.
  # The symbol is represented by a large number made from the ASCII characters of the symbol.
  # e.g. foo = 707979
  0
  [ln0=q           # Until n == 0:
    100*           #   multiply by 100
    lgx+32-        #   + next token - 32
    ln1-sn         #   n -= 1
    lax]salax
  ly:Y             # Y[y] = large number. Will be its permanent home if this is a new symbol.

  # Search for existing symbol.
  ly2-sn           # n = y - 2
  [ln0 >a          # if n < 0: y += 2 and return y
   ln;Y ly;Y =b    # else if Y[n] == Y[y]: return n
   ln2-sn          # else n -=2 
   lcx]sc          # recur
  [ly ly2+sy q]sa
  [lnq]sb
  lcx

  Lns@Las@Lbs@Lcs@ # clear locals
]sJ

# U() : print the symbol table
[
  0Sn0Sa
  [
Symbols:]ps@
  0[dly=q          # until n == y:
    [  ]ndn[	]n   #   print n \t
    d1+;Yn[	]n     #   print Y[n+1] \t
    d;Yps@         #   print Y[n] \n
    2+lax]salax
  Lns@Las@
]sU